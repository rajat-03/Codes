#include<iostream>
#include<windows.h>

using namespace std;

//for changing text color
HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);

struct node
{
    int data;
    struct node* left;
    struct node* right;
};

struct node* root=NULL;

void append()
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));

    cout<<"\nEnter data: ";
    cin>>temp->data;

    temp->left=NULL;
    temp->right=NULL;

    if(root==NULL)
    {
        root=temp;

        SetConsoleTextAttribute(h, 10);
        cout<<"\nNode added successfully\n";
        SetConsoleTextAttribute(h, 7);
    }
    else
    {
        struct node* p;
        p=root;

        while(p->right != NULL)
        {
            p = p->right;
        }

        p->right = temp;
        temp->left = p;

        SetConsoleTextAttribute(h,10);
        cout<<"\nNode added successfully\n";
        SetConsoleTextAttribute(h,7);

    }
}

void display()
{
    struct node* temp = root;

    if(temp == NULL)
    {
        SetConsoleTextAttribute(h,12);
        cout<<"\nList is empty\n";
        SetConsoleTextAttribute(h,7);
    }
    else
    {
      SetConsoleTextAttribute(h,10);
      cout<<"\nList nodes are: \n";
      SetConsoleTextAttribute(h,7);

        while(temp != NULL)
        {
            cout<<temp->data<<" ";
            temp = temp->right;
        }
        cout<<endl;
    }

}

int length()
{
    int count=0;
    struct node* temp=root;

    if(temp == NULL)
    {
        SetConsoleTextAttribute(h,12);
        cout<<"\nList is empty\n";
        SetConsoleTextAttribute(h,7);
    }
    else
    {
        while(temp != NULL)
        {
            count++;
            temp = temp->right;
        }
    }
    return count;
}

void addAtBegin()
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));

    cout<<"\nEnter node data: ";
    cin>>temp->data;

    temp->left=NULL;
    temp->right=NULL;

    if(root==NULL)
    {
        root = temp;

        SetConsoleTextAttribute(h, 10);
        cout<<"\nNode added successfully\n";
        SetConsoleTextAttribute(h, 7);
    }
    else
    {
        temp->right = root;
        root->left = temp;
        root = temp;

        SetConsoleTextAttribute(h, 10);
        cout<<"\nNode added successfully\n";
        SetConsoleTextAttribute(h, 7);
    }
}

void addAfter()
{
    int location,len,i=1;
    struct node* temp,*p;
    
    cout<<"\nEnter after node: ";
    cin>>location;

    len=length();

    if(location >=len)
    {
        SetConsoleTextAttribute(h, 12);
        cout<<"\nInvalid location";
        cout<<"\nCurrent list is having "<<len<<" nodes\n";
        SetConsoleTextAttribute(h, 7);

    }
    else
    {
        temp=(struct node*)malloc(sizeof(struct node));
        cout<<"\nEnter node data: ";
        cin>>temp->data;

        temp->left = NULL;
        temp-> right = NULL;

        p=root;
        while(i<location)
        {
            p=p->right;
            i++;
        }

        temp->right = p->right;
        p->right->left = temp;
        temp->left = p;
        p->right = temp;

        SetConsoleTextAttribute(h, 10);
        cout<<"\nNode added successfully\n";
        SetConsoleTextAttribute(h, 7);

    }

}

void deleteNode()
{
    
    int location,len;

    cout<<"\nEnter node location: ";
    cin>>location;

    len=length();

    if(location>len)
    {
        SetConsoleTextAttribute(h, 12);
        cout<<"\nInvalid location";
        cout<<"\nCurrent list is having "<<len<<" nodes\n";
        SetConsoleTextAttribute(h, 7);
    }
    else if(location == 1)
    {
        struct node* temp = root;
        root = root->right;
        root->left = NULL;
        temp->right = NULL;
        free(temp);

        SetConsoleTextAttribute(h, 12);
        cout<<"\nNode deleted successfully\n";
        SetConsoleTextAttribute(h, 7);

    }
    else if(location ==  len)
    {
        struct node* temp= root;
        int i=1;

        while(i < location)
        {
            temp = temp->right;
            i++;
        }

        temp->left->right=NULL;
        temp->left = NULL; 
        free(temp);

        SetConsoleTextAttribute(h,12);
        cout<<"\nNode deleted successfully\n";
        SetConsoleTextAttribute(h,7);
    }
    else
    {
        struct node* temp=root;
        int i=1;

        while(i<location)
        {
            temp= temp->right;
            i++;
        }

        temp->left->right = temp->right;
        temp->right->left = temp->left;
        temp->right = NULL;
        temp->left = NULL;
        free(temp);

        SetConsoleTextAttribute(h,12);
        cout<<"\nNode deleted successfully\n";
        SetConsoleTextAttribute(h,7);

    }
}

void reverseList()
{
        struct node* current=root;
        struct node* nextNode= NULL;
        struct node* newRoot= root;

        while(current !=0)
        {
            nextNode = current->right;
            current->right = current->left;
            current->left = nextNode;
            newRoot = current;
            current = nextNode;
        } 
        root=newRoot;

        SetConsoleTextAttribute(h, 10);
        cout<<"\nList reversed successfully\n";
        SetConsoleTextAttribute(h, 7);
}
int main()
{
    
    int choice,len;

    while(1)
    {  
        cout<<"\n1. Append node \n2. Display";
        cout<<"\n3. Length \n4. Add at begin";
        cout<<"\n5. Add After \n6. Delete";
        cout<<"\n7. Reverse the List \n8.Exit";

        SetConsoleTextAttribute(h, 9);
        cout<<"\nEnter choice: ";
        cin>>choice;
        SetConsoleTextAttribute(h, 7);

        switch (choice)
        {
         case 1: append();
            break;

         case 2: display();
            break;

         case 3: len=length();
            cout<<"\nLength: "<<len<<endl;
            break;

         case 4: addAtBegin();
            break;

         case 5: addAfter();
            break;

         case 6: deleteNode();
            break;

            case 7: reverseList();
            break;

         case 8: exit(1);
            break;
        
         default: cout<<"\nInvalid choice\n";
            break;
        }
    }
    return 0;
}
